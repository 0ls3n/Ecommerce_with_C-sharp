// <auto-generated />
using System;
using Ecommerce_Project.Models.Domain_Classes;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce_Project.Migrations.ProductDb
{
    [DbContext(typeof(ProductDbContext))]
    partial class ProductDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce_Project.Models.Domain_Classes.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Ecommerce_Project.Models.Domain_Classes.Accessory", b =>
                {
                    b.HasBaseType("Ecommerce_Project.Models.Domain_Classes.Product");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Accessory", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Project.Models.Domain_Classes.Clothing", b =>
                {
                    b.HasBaseType("Ecommerce_Project.Models.Domain_Classes.Product");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Clothing", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Project.Models.Domain_Classes.Footwear", b =>
                {
                    b.HasBaseType("Ecommerce_Project.Models.Domain_Classes.Product");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsWaterproof")
                        .HasColumnType("bit");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Footwear", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Project.Models.Domain_Classes.Accessory", b =>
                {
                    b.HasOne("Ecommerce_Project.Models.Domain_Classes.Product", null)
                        .WithOne()
                        .HasForeignKey("Ecommerce_Project.Models.Domain_Classes.Accessory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce_Project.Models.Domain_Classes.Clothing", b =>
                {
                    b.HasOne("Ecommerce_Project.Models.Domain_Classes.Product", null)
                        .WithOne()
                        .HasForeignKey("Ecommerce_Project.Models.Domain_Classes.Clothing", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce_Project.Models.Domain_Classes.Footwear", b =>
                {
                    b.HasOne("Ecommerce_Project.Models.Domain_Classes.Product", null)
                        .WithOne()
                        .HasForeignKey("Ecommerce_Project.Models.Domain_Classes.Footwear", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
